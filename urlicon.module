<?php

/**
 * URL Icon
 * 
 * @file
 * Filter all external links in nodes and comments.
 *
 * @author
 * Stefan Auditor <stefan.auditor@erdfisch.de>
 * for erdfisch http://erdfisch.de
 */

// Path to directory where favicons are stored
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;

define('UI_FILE_PATH', 'public://urlicon');
define('UI_FORMAT_FAVICON', 0);
define('UI_FORMAT_ICON', 1);
define('UI_FORMAT_CLASS', 2);

/**
 * Implementation of hook_help().
 */
function urlicon_help($path, $arg) {
  switch ($path) {
    case 'admin/help#urlicon':
      $output = '<p>'. t('The URLIcon module automatically adds a CSS class to &lt;a&gt;-elements reflecting their target and fetches the favicon from the target site.') .'</p>';
      $output .= '<p>'. t('Use Input Formats to enable the URL filter') .'</p>';
      $output .= '<p>'. t('<ol><li>Select an existing Input Format or add a new one</li><li>Configure the Input Format</li><li>Enable URL class filter and Save configuration</li><li>Rearrange the weight of the URL filter depending on what filters exist in the format</li></ol>') .'</p>';
      $output .= '<p>'. t('You can enable the urlfilter for an input format from <a href="%admin-filter">administer &gt;&gt; Site Configuration &gt;&gt; Input Filter</a>.', array('%admin-filter' => \Drupal::url('filter.admin_overview'))) .'</p>';
      return $output;
    case 'admin/modules#description':
      return t('Automatically fetch favicons for URLs.');
  }
}

/**
 * Implementation of hook_init().
 */
function urlicon_init() {
  drupal_add_css(drupal_get_path('module', 'urlicon') .'/urlicon.css');
}

/**
 * Implementation of hook_file_download().
 */
function urlicon_file_download($filepath) {
  // Check if the file is controlled by the current module.
  // @todo This is not a particularly safe check.
  if (strpos($filepath, 'urlicon') !== FALSE) {
    if (\Drupal::currentUser()->hasPermission('access content')) {
      // This is an assumption
      return array('Content-type: image/ico');
    }
    else {
      return -1;
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function urlicon_theme($existing, $type, $theme, $path) {
  return [
    'urlicon' => [
      'variables' => [
        'text' => NULL,
        'favicon' => NULL,
        'path' => NULL,
        'attributes' => [],
      ],
    ],
  ];
}

/**
 * Return a themed link with a favicon.
 */
function theme_urlicon($variables) {
  $text = $variables['text'];
  $path = $variables['path'];
  $favicon = $variables['favicon'];
  $attributes = $variables['attributes'];

  $attributes = new Attribute($attributes);
  $attributes['src'] = $favicon;
  $favicon = '<img' . (string) $attributes . '/>';
  $output = \Drupal::l($text .' '. $favicon, Url::fromUri($path, ['absolute' => TRUE, 'html' => TRUE]));
  return  $output;
}
